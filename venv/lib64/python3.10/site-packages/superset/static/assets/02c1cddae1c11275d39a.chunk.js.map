{"version":3,"file":"02c1cddae1c11275d39a.chunk.js","mappings":"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","sources":["webpack://superset/./src/explore/components/controls/TextAreaControl.jsx","webpack://superset/./src/components/CronPicker/CronPicker.tsx","webpack://superset/./src/components/Switch/index.tsx","webpack://superset/./src/components/TimezoneSelector/index.tsx","webpack://superset/./src/features/alerts/components/NumberInput.tsx","webpack://superset/./src/features/alerts/components/AlertReportCronScheduler.tsx","webpack://superset/./src/features/alerts/components/NotificationMethod.tsx","webpack://superset/./src/features/alerts/components/ValidatedPanelHeader.tsx","webpack://superset/./src/features/alerts/components/StyledPanel.tsx","webpack://superset/./src/features/alerts/buildErrorTooltipMessage.tsx","webpack://superset/./src/features/alerts/AlertReportModal.tsx","webpack://superset/./src/features/alerts/types.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { TextArea } from 'src/components/Input';\nimport { t, withTheme } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport { TextAreaEditor } from 'src/components/AsyncAceEditor';\nimport ModalTrigger from 'src/components/ModalTrigger';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\n\nconst propTypes = {\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  initialValue: PropTypes.string,\n  height: PropTypes.number,\n  minLines: PropTypes.number,\n  maxLines: PropTypes.number,\n  offerEditInModal: PropTypes.bool,\n  language: PropTypes.oneOf([\n    null,\n    'json',\n    'html',\n    'sql',\n    'markdown',\n    'javascript',\n  ]),\n  aboveEditorSection: PropTypes.node,\n  readOnly: PropTypes.bool,\n  resize: PropTypes.oneOf([\n    null,\n    'block',\n    'both',\n    'horizontal',\n    'inline',\n    'none',\n    'vertical',\n  ]),\n  textAreaStyles: PropTypes.object,\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  initialValue: '',\n  height: 250,\n  minLines: 3,\n  maxLines: 10,\n  offerEditInModal: true,\n  readOnly: false,\n  resize: null,\n  textAreaStyles: {},\n};\n\nclass TextAreaControl extends React.Component {\n  onControlChange(event) {\n    const { value } = event.target;\n    this.props.onChange(value);\n  }\n\n  onAreaEditorChange(value) {\n    this.props.onChange(value);\n  }\n\n  renderEditor(inModal = false) {\n    const minLines = inModal ? 40 : this.props.minLines || 12;\n    if (this.props.language) {\n      const style = {\n        border: `1px solid ${this.props.theme.colors.grayscale.light1}`,\n        minHeight: `${minLines}em`,\n        width: 'auto',\n        ...this.props.textAreaStyles,\n      };\n      if (this.props.resize) {\n        style.resize = this.props.resize;\n      }\n      if (this.props.readOnly) {\n        style.backgroundColor = '#f2f2f2';\n      }\n\n      return (\n        <TextAreaEditor\n          mode={this.props.language}\n          style={style}\n          minLines={minLines}\n          maxLines={inModal ? 1000 : this.props.maxLines}\n          editorProps={{ $blockScrolling: true }}\n          defaultValue={this.props.initialValue}\n          readOnly={this.props.readOnly}\n          key={this.props.name}\n          {...this.props}\n          onChange={this.onAreaEditorChange.bind(this)}\n        />\n      );\n    }\n    return (\n      <TextArea\n        placeholder={t('textarea')}\n        onChange={this.onControlChange.bind(this)}\n        defaultValue={this.props.initialValue}\n        disabled={this.props.readOnly}\n        style={{ height: this.props.height }}\n      />\n    );\n  }\n\n  renderModalBody() {\n    return (\n      <>\n        <div>{this.props.aboveEditorSection}</div>\n        {this.renderEditor(true)}\n      </>\n    );\n  }\n\n  render() {\n    const controlHeader = <ControlHeader {...this.props} />;\n    return (\n      <div>\n        {controlHeader}\n        {this.renderEditor()}\n        {this.props.offerEditInModal && (\n          <ModalTrigger\n            modalTitle={controlHeader}\n            triggerNode={\n              <Button buttonSize=\"small\" className=\"m-t-5\">\n                {t('Edit')} <strong>{this.props.language}</strong>{' '}\n                {t('in modal')}\n              </Button>\n            }\n            modalBody={this.renderModalBody(true)}\n            responsive\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nTextAreaControl.propTypes = propTypes;\nTextAreaControl.defaultProps = defaultProps;\n\nexport default withTheme(TextAreaControl);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { ConfigProvider } from 'antd';\nimport { styled, t } from '@superset-ui/core';\nimport ReactCronPicker, { Locale, CronProps } from 'react-js-cron';\n\nexport * from 'react-js-cron';\n\nexport const LOCALE: Locale = {\n  everyText: t('every'),\n  emptyMonths: t('every month'),\n  emptyMonthDays: t('every day of the month'),\n  emptyMonthDaysShort: t('day of the month'),\n  emptyWeekDays: t('every day of the week'),\n  emptyWeekDaysShort: t('day of the week'),\n  emptyHours: t('every hour'),\n  emptyMinutes: t('every minute'),\n  emptyMinutesForHourPeriod: t('every'),\n  yearOption: t('year'),\n  monthOption: t('month'),\n  weekOption: t('week'),\n  dayOption: t('day'),\n  hourOption: t('hour'),\n  minuteOption: t('minute'),\n  rebootOption: t('reboot'),\n  prefixPeriod: t('Every'),\n  prefixMonths: t('in'),\n  prefixMonthDays: t('on'),\n  prefixWeekDays: t('on'),\n  prefixWeekDaysForMonthAndYearPeriod: t('or'),\n  prefixHours: t('at'),\n  prefixMinutes: t(':'),\n  prefixMinutesForHourPeriod: t('at'),\n  suffixMinutesForHourPeriod: t('minute(s)'),\n  errorInvalidCron: t('Invalid cron expression'),\n  clearButtonText: t('Clear'),\n  weekDays: [\n    // Order is important, the index will be used as value\n    t('Sunday'), // Sunday must always be first, it's \"0\"\n    t('Monday'),\n    t('Tuesday'),\n    t('Wednesday'),\n    t('Thursday'),\n    t('Friday'),\n    t('Saturday'),\n  ],\n  months: [\n    // Order is important, the index will be used as value\n    t('January'),\n    t('February'),\n    t('March'),\n    t('April'),\n    t('May'),\n    t('June'),\n    t('July'),\n    t('August'),\n    t('September'),\n    t('October'),\n    t('November'),\n    t('December'),\n  ],\n  // Order is important, the index will be used as value\n  altWeekDays: [\n    t('SUN'), // Sunday must always be first, it's \"0\"\n    t('MON'),\n    t('TUE'),\n    t('WED'),\n    t('THU'),\n    t('FRI'),\n    t('SAT'),\n  ],\n  // Order is important, the index will be used as value\n  altMonths: [\n    t('JAN'),\n    t('FEB'),\n    t('MAR'),\n    t('APR'),\n    t('MAY'),\n    t('JUN'),\n    t('JUL'),\n    t('AUG'),\n    t('SEP'),\n    t('OCT'),\n    t('NOV'),\n    t('DEC'),\n  ],\n};\n\nexport const CronPicker = styled((props: CronProps) => (\n  <ConfigProvider\n    getPopupContainer={trigger => trigger.parentElement as HTMLElement}\n  >\n    <ReactCronPicker locale={LOCALE} {...props} />\n  </ConfigProvider>\n))`\n  ${({ theme }) => `\n\n    /* Boilerplate styling for ReactCronPicker imported explicitly in GlobalStyles.tsx */\n\n    /* When year period is selected */\n\n    :has(.react-js-cron-months) {\n      display: grid !important;\n      grid-template-columns: repeat(2, 50%);\n      column-gap: ${theme.gridUnit}px;\n      row-gap: ${theme.gridUnit * 2}px;\n      div:has(.react-js-cron-hours) {\n        grid-column: span 2;\n        display: flex;\n        justify-content: space-between;\n        .react-js-cron-field {\n          width: 50%;\n        }\n      }\n    }\n\n    /* When month period is selected */\n\n    :not(:has(.react-js-cron-months)) {\n      display: grid;\n      grid-template-columns: repeat(2, 50%);\n      column-gap: ${theme.gridUnit}px;\n      row-gap: ${theme.gridUnit * 2}px;\n      .react-js-cron-period {\n        grid-column: span 2;\n      }\n      div:has(.react-js-cron-hours) {\n        grid-column: span 2;\n        display: flex;\n        justify-content: space-between;\n        .react-js-cron-field {\n          width: 50%;\n        }\n      }\n    }\n\n    /* When week period is selected */\n\n    :not(:has(.react-js-cron-month-days)) {\n      .react-js-cron-week-days {\n        grid-column: span 2;\n      }\n    }\n\n    /* For proper alignment of inputs and span elements */\n\n    :not(div:has(.react-js-cron-hours)) {\n      display: flex;\n      flex-wrap: nowrap;\n    }\n\n    div:has(.react-js-cron-hours) {\n      width: 100%;\n    }\n\n    .react-js-cron-minutes > span {\n      padding-left: ${theme.gridUnit}px;\n    }\n\n    /* Sizing of select container */\n\n    .react-js-cron-select.ant-select {\n      width: 100%;\n      .ant-select-selector {\n        flex-wrap: nowrap;\n      }\n    }\n\n    .react-js-cron-field {\n      width: 100%;\n      margin-bottom: 0px;\n      > span {\n        margin-left: 0px;\n      }\n    }\n\n    .react-js-cron-custom-select .ant-select-selection-placeholder {\n      flex: auto;\n      border-radius: ${theme.gridUnit}px;\n    }\n\n    .react-js-cron-custom-select .ant-select-selection-overflow-item {\n      align-self: center;\n    }\n\n    .react-js-cron-select > div:first-of-type,\n    .react-js-cron-custom-select {\n      border-radius: ${theme.gridUnit}px;\n    }\n  `}\n`;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled } from '@superset-ui/core';\nimport BaseSwitch, { SwitchProps } from 'antd/lib/switch';\n\nconst StyledSwitch = styled(BaseSwitch)`\n  .ant-switch-checked {\n    background-color: ${({ theme }) => theme.colors.primary.base};\n  }\n`;\n\nexport const Switch = (props: SwitchProps) => <StyledSwitch {...props} />;\nexport type { SwitchProps };\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useMemo } from 'react';\nimport moment from 'moment-timezone';\nimport { t } from '@superset-ui/core';\nimport { Select } from 'src/components';\n\nconst DEFAULT_TIMEZONE = {\n  name: 'GMT Standard Time',\n  value: 'Africa/Abidjan', // timezones are deduped by the first alphabetical value\n};\n\nconst MIN_SELECT_WIDTH = '400px';\n\nconst offsetsToName = {\n  '-300-240': ['Eastern Standard Time', 'Eastern Daylight Time'],\n  '-360-300': ['Central Standard Time', 'Central Daylight Time'],\n  '-420-360': ['Mountain Standard Time', 'Mountain Daylight Time'],\n  '-420-420': [\n    'Mountain Standard Time - Phoenix',\n    'Mountain Standard Time - Phoenix',\n  ],\n  '-480-420': ['Pacific Standard Time', 'Pacific Daylight Time'],\n  '-540-480': ['Alaska Standard Time', 'Alaska Daylight Time'],\n  '-600-600': ['Hawaii Standard Time', 'Hawaii Daylight Time'],\n  '60120': ['Central European Time', 'Central European Daylight Time'],\n  '00': [DEFAULT_TIMEZONE.name, DEFAULT_TIMEZONE.name],\n  '060': ['GMT Standard Time - London', 'British Summer Time'],\n};\n\nconst currentDate = moment();\nconst JANUARY = moment([2021, 1]);\nconst JULY = moment([2021, 7]);\n\nconst getOffsetKey = (name: string) =>\n  JANUARY.tz(name).utcOffset().toString() +\n  JULY.tz(name).utcOffset().toString();\n\nconst getTimezoneName = (name: string) => {\n  const offsets = getOffsetKey(name);\n  return (\n    (currentDate.tz(name).isDST()\n      ? offsetsToName[offsets]?.[1]\n      : offsetsToName[offsets]?.[0]) || name\n  );\n};\n\nconst ALL_ZONES = moment.tz\n  .countries()\n  .map(country => moment.tz.zonesForCountry(country, true))\n  .flat();\n\nconst TIMEZONES: moment.MomentZoneOffset[] = [];\nALL_ZONES.forEach(zone => {\n  if (\n    !TIMEZONES.find(\n      option => getOffsetKey(option.name) === getOffsetKey(zone.name),\n    )\n  ) {\n    TIMEZONES.push(zone); // dedupe zones by offsets\n  }\n});\n\nconst TIMEZONE_OPTIONS = TIMEZONES.map(zone => ({\n  label: `GMT ${moment\n    .tz(currentDate, zone.name)\n    .format('Z')} (${getTimezoneName(zone.name)})`,\n  value: zone.name,\n  offsets: getOffsetKey(zone.name),\n  timezoneName: zone.name,\n}));\n\nconst TIMEZONE_OPTIONS_SORT_COMPARATOR = (\n  a: (typeof TIMEZONE_OPTIONS)[number],\n  b: (typeof TIMEZONE_OPTIONS)[number],\n) =>\n  moment.tz(currentDate, a.timezoneName).utcOffset() -\n  moment.tz(currentDate, b.timezoneName).utcOffset();\n\n// pre-sort timezone options by time offset\nTIMEZONE_OPTIONS.sort(TIMEZONE_OPTIONS_SORT_COMPARATOR);\n\nconst matchTimezoneToOptions = (timezone: string) =>\n  TIMEZONE_OPTIONS.find(option => option.offsets === getOffsetKey(timezone))\n    ?.value || DEFAULT_TIMEZONE.value;\n\nexport type TimezoneSelectorProps = {\n  onTimezoneChange: (value: string) => void;\n  timezone?: string | null;\n  minWidth?: string;\n};\n\nexport default function TimezoneSelector({\n  onTimezoneChange,\n  timezone,\n  minWidth = MIN_SELECT_WIDTH, // smallest size for current values\n}: TimezoneSelectorProps) {\n  const validTimezone = useMemo(\n    () => matchTimezoneToOptions(timezone || moment.tz.guess()),\n    [timezone],\n  );\n\n  // force trigger a timezone update if provided `timezone` is not invalid\n  useEffect(() => {\n    if (timezone !== validTimezone) {\n      onTimezoneChange(validTimezone);\n    }\n  }, [validTimezone, onTimezoneChange, timezone]);\n\n  return (\n    <Select\n      ariaLabel={t('Timezone selector')}\n      css={{ minWidth }}\n      onChange={tz => onTimezoneChange(tz as string)}\n      value={validTimezone}\n      options={TIMEZONE_OPTIONS}\n      sortComparator={TIMEZONE_OPTIONS_SORT_COMPARATOR}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, ChangeEvent } from 'react';\n\ninterface NumberInputProps {\n  timeUnit: string;\n  min: number;\n  name: string;\n  value: string | number;\n  placeholder: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport default function NumberInput({\n  timeUnit,\n  min,\n  name,\n  value,\n  placeholder,\n  onChange,\n}: NumberInputProps) {\n  const [isFocused, setIsFocused] = useState<boolean>(false);\n\n  return (\n    <input\n      type=\"text\"\n      min={min}\n      name={name}\n      value={value ? `${value}${!isFocused ? ` ${timeUnit}` : ''}` : ''}\n      placeholder={placeholder}\n      onFocus={() => setIsFocused(true)}\n      onBlur={() => setIsFocused(false)}\n      onChange={onChange}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useCallback, useRef, FocusEvent } from 'react';\nimport { t, useTheme } from '@superset-ui/core';\n\nimport { AntdInput, Select } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport { CronPicker, CronError } from 'src/components/CronPicker';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nexport interface AlertReportCronSchedulerProps {\n  value: string;\n  onChange: (change: string) => any;\n}\n\nenum ScheduleType {\n  Picker = 'picker',\n  Input = 'input',\n}\n\nconst SCHEDULE_TYPE_OPTIONS = [\n  {\n    label: t('Recurring (every)'),\n    value: ScheduleType.Picker,\n  },\n  {\n    label: t('CRON Schedule'),\n    value: ScheduleType.Input,\n  },\n];\n\nexport const AlertReportCronScheduler: React.FC<\n  AlertReportCronSchedulerProps\n> = ({ value, onChange }) => {\n  const theme = useTheme();\n  const inputRef = useRef<AntdInput>(null);\n  const [scheduleFormat, setScheduleFormat] = useState<ScheduleType>(\n    ScheduleType.Picker,\n  );\n\n  const customSetValue = useCallback(\n    (newValue: string) => {\n      onChange(newValue);\n      inputRef.current?.setValue(newValue);\n    },\n    [inputRef, onChange],\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => {\n      onChange(event.target.value);\n    },\n    [onChange],\n  );\n\n  const handlePressEnter = useCallback(() => {\n    onChange(inputRef.current?.input.value || '');\n  }, [onChange]);\n\n  const [error, onError] = useState<CronError>();\n\n  return (\n    <>\n      <StyledInputContainer>\n        <div className=\"control-label\">\n          {t('Schedule type')}\n          <span className=\"required\">*</span>\n        </div>\n        <div className=\"input-container\">\n          <Select\n            ariaLabel={t('Schedule type')}\n            placeholder={t('Schedule type')}\n            onChange={(e: ScheduleType) => {\n              setScheduleFormat(e);\n            }}\n            value={scheduleFormat}\n            options={SCHEDULE_TYPE_OPTIONS}\n          />\n        </div>\n      </StyledInputContainer>\n\n      <StyledInputContainer data-test=\"input-content\" className=\"styled-input\">\n        <div className=\"control-label\">\n          {t('Schedule')}\n          <span className=\"required\">*</span>\n        </div>\n        {scheduleFormat === ScheduleType.Input && (\n          <Input\n            type=\"text\"\n            name=\"crontab\"\n            ref={inputRef}\n            style={error ? { borderColor: theme.colors.error.base } : {}}\n            placeholder={t('CRON expression')}\n            value={value}\n            onBlur={handleBlur}\n            onChange={e => customSetValue(e.target.value)}\n            onPressEnter={handlePressEnter}\n          />\n        )}\n        {scheduleFormat === ScheduleType.Picker && (\n          <CronPicker\n            clearButton={false}\n            value={value}\n            setValue={customSetValue}\n            displayError={scheduleFormat === ScheduleType.Picker}\n            onError={onError}\n          />\n        )}\n      </StyledInputContainer>\n    </>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useState } from 'react';\nimport { styled, t, useTheme } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport { NotificationMethodOption, NotificationSetting } from '../types';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nconst StyledNotificationMethod = styled.div`\n  margin-bottom: 10px;\n\n  .input-container {\n    textarea {\n      height: auto;\n    }\n  }\n\n  .inline-container {\n    margin-bottom: 10px;\n\n    > div {\n      margin: 0;\n    }\n\n    .delete-button {\n      margin-left: 10px;\n      padding-top: 3px;\n    }\n  }\n`;\n\ninterface NotificationMethodProps {\n  setting?: NotificationSetting | null;\n  index: number;\n  onUpdate?: (index: number, updatedSetting: NotificationSetting) => void;\n  onRemove?: (index: number) => void;\n}\n\nexport const NotificationMethod: FunctionComponent<NotificationMethodProps> = ({\n  setting = null,\n  index,\n  onUpdate,\n  onRemove,\n}) => {\n  const { method, recipients, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState<string>(\n    recipients || '',\n  );\n  const theme = useTheme();\n\n  if (!setting) {\n    return null;\n  }\n\n  const onMethodChange = (method: NotificationMethodOption) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        method,\n        recipients: '',\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onRecipientsChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { target } = event;\n\n    setRecipientValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n\n  return (\n    <StyledNotificationMethod>\n      <div className=\"inline-container\">\n        <StyledInputContainer>\n          <div className=\"control-label\">{t('Notification Method')}</div>\n          <div className=\"input-container\">\n            <Select\n              ariaLabel={t('Delivery method')}\n              data-test=\"select-delivery-method\"\n              onChange={onMethodChange}\n              placeholder={t('Select Delivery Method')}\n              options={(options || []).map(\n                (method: NotificationMethodOption) => ({\n                  label: method,\n                  value: method,\n                }),\n              )}\n              value={method}\n            />\n            {index !== 0 && !!onRemove ? (\n              <span\n                role=\"button\"\n                tabIndex={0}\n                className=\"delete-button\"\n                onClick={() => onRemove(index)}\n              >\n                <Icons.Trash iconColor={theme.colors.grayscale.base} />\n              </span>\n            ) : null}\n          </div>\n        </StyledInputContainer>\n      </div>\n      {method !== undefined ? (\n        <StyledInputContainer>\n          <div className=\"control-label\">\n            {t('%s recipients', method)}\n            <span className=\"required\">*</span>\n          </div>\n          <div className=\"input-container\">\n            <textarea\n              name=\"recipients\"\n              data-test=\"recipients\"\n              value={recipientValue}\n              onChange={onRecipientsChange}\n            />\n          </div>\n          <div className=\"helper\">\n            {t('Recipients are separated by \",\" or \";\"')}\n          </div>\n        </StyledInputContainer>\n      ) : null}\n    </StyledNotificationMethod>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport { CheckCircleOutlined } from '@ant-design/icons';\n\nconst ValidatedPanelHeader = ({\n  title,\n  subtitle,\n  validateCheckStatus,\n  testId,\n}: {\n  title: string;\n  subtitle: string;\n  validateCheckStatus: boolean;\n  testId?: string;\n}): JSX.Element => {\n  const checkmark = <CheckCircleOutlined />;\n\n  return (\n    <div className=\"collapse-panel-header\">\n      <div className=\"collapse-panel-title\" data-test={testId}>\n        <span>{t(title)}</span>\n        {validateCheckStatus ? (\n          <span className=\"validation-checkmark\">{checkmark}</span>\n        ) : (\n          <span className=\"collapse-panel-asterisk\">{' *'}</span>\n        )}\n      </div>\n      <p className=\"collapse-panel-subtitle\">\n        {subtitle ? t(subtitle) : undefined}\n      </p>\n    </div>\n  );\n};\n\nexport default ValidatedPanelHeader;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { css, SupersetTheme } from '@superset-ui/core';\nimport { Collapse as AntdCollapse } from 'antd';\nimport { CollapsePanelProps } from 'antd/lib/collapse';\n\nconst anticonHeight = 12;\nconst antdPanelStyles = (theme: SupersetTheme) => css`\n  .ant-collapse-header {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    padding: 0px ${theme.gridUnit * 4}px;\n\n    .anticon.anticon-right.ant-collapse-arrow {\n      padding: 0;\n      top: calc(50% - ${anticonHeight / 2}px);\n    }\n\n    .collapse-panel-title {\n      font-size: ${theme.gridUnit * 4}px;\n      font-weight: ${theme.typography.weights.bold};\n      line-height: 130%;\n    }\n\n    .collapse-panel-subtitle {\n      color: ${theme.colors.grayscale.base};\n      font-size: ${theme.typography.sizes.s}px;\n      font-weight: ${theme.typography.weights.normal};\n      line-height: 150%;\n      margin-bottom: 0;\n      padding-top: ${theme.gridUnit}px;\n    }\n\n    .collapse-panel-asterisk {\n      color: var(--semantic-error-base, ${theme.colors.warning.dark1});\n    }\n    .validation-checkmark {\n      width: ${theme.gridUnit * 4}px;\n      height: ${theme.gridUnit * 4}px;\n      margin-left: ${theme.gridUnit}px;\n      color: ${theme.colors.success.base};\n    }\n  }\n`;\n\nexport interface PanelProps extends CollapsePanelProps {\n  children?: React.ReactNode;\n}\nconst StyledPanel = (props: PanelProps) => (\n  <AntdCollapse.Panel\n    css={(theme: SupersetTheme) => antdPanelStyles(theme)}\n    {...props}\n  />\n);\n\nexport default StyledPanel;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled } from '@superset-ui/core';\nimport { ValidationObject } from './types';\nimport { TRANSLATIONS } from './AlertReportModal';\n\nconst StyledList = styled.ul`\n  margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-inline-start: ${({ theme }) => theme.gridUnit * 3}px;\n`;\n\nexport const buildErrorTooltipMessage = (\n  validationStatus: ValidationObject,\n) => {\n  const sectionErrors: string[] = [];\n  Object.values(validationStatus).forEach(section => {\n    if (section.hasErrors) {\n      const sectionTitle = `${section.name}: `;\n      sectionErrors.push(sectionTitle + section.errors.join(', '));\n    }\n  });\n  return (\n    <div>\n      {TRANSLATIONS.ERROR_TOOLTIP_MESSAGE}\n      <StyledList>\n        {sectionErrors.map(err => (\n          <li key={err}>{err}</li>\n        ))}\n      </StyledList>\n    </div>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  FunctionComponent,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  ReactNode,\n} from 'react';\nimport {\n  css,\n  isFeatureEnabled,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  SupersetTheme,\n  t,\n} from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\n\nimport { InputNumber } from 'src/components/Input';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport Collapse from 'src/components/Collapse';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport { propertyComparator } from 'src/components/Select/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Owner from 'src/types/Owner';\nimport { AntdCheckbox, AsyncSelect, Select } from 'src/components';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { useCommonConf } from 'src/features/databases/state';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport {\n  NotificationMethodOption,\n  NotificationSetting,\n  AlertObject,\n  ChartObject,\n  DashboardObject,\n  DatabaseObject,\n  MetaObject,\n  Operator,\n  Recipient,\n  AlertsReportsConfig,\n  ValidationObject,\n  Sections,\n} from 'src/features/alerts/types';\nimport { useSelector } from 'react-redux';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport NumberInput from './components/NumberInput';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';\nimport ValidatedPanelHeader from './components/ValidatedPanelHeader';\nimport StyledPanel from './components/StyledPanel';\nimport { buildErrorTooltipMessage } from './buildErrorTooltipMessage';\n\nconst TIMEOUT_MIN = 1;\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n  'pivot_table_v2',\n  'table',\n  'paired_ttest',\n];\n\ntype SelectValue = {\n  value: string;\n  label: string;\n};\n\nexport interface AlertReportModalProps {\n  addSuccessToast: (msg: string) => void;\n  addDangerToast: (msg: string) => void;\n  alert?: AlertObject | null;\n  isReport?: boolean;\n  onAdd?: (alert?: AlertObject) => void;\n  onHide: () => void;\n  show: boolean;\n}\n\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 0 * * *'; // every day\nconst DEFAULT_RETENTION = 90;\n\nconst DEFAULT_NOTIFICATION_METHODS: NotificationMethodOption[] = ['Email'];\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst CONDITIONS = [\n  {\n    label: t('< (Smaller than)'),\n    value: '<',\n  },\n  {\n    label: t('> (Larger than)'),\n    value: '>',\n  },\n  {\n    label: t('<= (Smaller or equal)'),\n    value: '<=',\n  },\n  {\n    label: t('>= (Larger or equal)'),\n    value: '>=',\n  },\n  {\n    label: t('== (Is equal)'),\n    value: '==',\n  },\n  {\n    label: t('!= (Is not equal)'),\n    value: '!=',\n  },\n  {\n    label: t('Not null'),\n    value: 'not null',\n  },\n];\n\nconst RETENTION_OPTIONS = [\n  {\n    label: t('None'),\n    value: 0,\n  },\n  {\n    label: t('30 days'),\n    value: 30,\n  },\n  {\n    label: t('60 days'),\n    value: 60,\n  },\n  {\n    label: t('90 days'),\n    value: 90,\n  },\n];\n\nconst CONTENT_TYPE_OPTIONS = [\n  {\n    label: t('Dashboard'),\n    value: 'dashboard',\n  },\n  {\n    label: t('Chart'),\n    value: 'chart',\n  },\n];\nconst FORMAT_OPTIONS = {\n  png: {\n    label: t('Send as PNG'),\n    value: 'PNG',\n  },\n  csv: {\n    label: t('Send as CSV'),\n    value: 'CSV',\n  },\n  txt: {\n    label: t('Send as text'),\n    value: 'TEXT',\n  },\n};\n\n// Apply to final text input components of each collapse panel\nconst noMarginBottom = css`\n  margin-bottom: 0;\n`;\n\n/*\nHeight of modal body defined here, total width defined at component invocation as antd prop.\n */\nconst StyledModal = styled(Modal)`\n  .ant-modal-body {\n    height: 720px;\n  }\n\n  .control-label {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .ant-collapse > .ant-collapse-item {\n    border-bottom: none;\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n  }\n`;\n\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\n\nexport const StyledInputContainer = styled.div`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-top: 0px;\n    margin-bottom: ${theme.gridUnit * 4}px;\n\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input[type='number'] {\n      -moz-appearance: textfield;\n    }\n\n    .helper {\n      display: block;\n      color: ${theme.colors.grayscale.base};\n      font-size: ${theme.typography.sizes.s}px;\n      padding: ${theme.gridUnit}px 0;\n      text-align: left;\n    }\n\n    .required {\n      margin-left: ${theme.gridUnit / 2}px;\n      color: ${theme.colors.error.base};\n    }\n\n    .input-container {\n      display: flex;\n      align-items: center;\n\n      > div {\n        width: 100%;\n      }\n\n      label {\n        display: flex;\n        margin-right: ${theme.gridUnit * 2}px;\n      }\n\n      i {\n        margin: 0 ${theme.gridUnit}px;\n      }\n    }\n\n    input,\n    textarea {\n      flex: 1 1 auto;\n    }\n\n    input[disabled] {\n      color: ${theme.colors.grayscale.base};\n    }\n\n    textarea {\n      height: 300px;\n      resize: none;\n    }\n\n    input::placeholder,\n    textarea::placeholder {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    textarea,\n    input[type='text'],\n    input[type='number'] {\n      padding: ${theme.gridUnit}px ${theme.gridUnit * 2}px;\n      border-style: none;\n      border: 1px solid ${theme.colors.grayscale.light2};\n      border-radius: ${theme.gridUnit}px;\n\n      &[name='description'] {\n        flex: 1 1 auto;\n      }\n    }\n\n    .input-label {\n      margin-left: 10px;\n    }\n  `}\n`;\n\nconst StyledCheckbox = styled(AntdCheckbox)`\n  margin-top: ${({ theme }) => theme.gridUnit * 0}px;\n`;\n\nconst StyledTooltip = styled(InfoTooltipWithTrigger)`\n  margin-left: ${({ theme }) => theme.gridUnit}px;\n`;\n\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  ${({ theme }) => css`\n    color: ${theme.colors.primary.dark1};\n    cursor: pointer;\n\n    i {\n      margin-right: ${theme.gridUnit * 2}px;\n    }\n\n    &.disabled {\n      color: ${theme.colors.grayscale.light1};\n      cursor: default;\n    }\n  `}\n`;\n\nconst StyledNotificationMethodWrapper = styled.div`\n  .inline-container .input-container {\n    margin-left: 0;\n  }\n`;\n\nconst inputSpacer = (theme: SupersetTheme) => css`\n  margin-right: ${theme.gridUnit * 3}px;\n`;\n\ntype NotificationAddStatus = 'active' | 'disabled' | 'hidden';\n\ninterface NotificationMethodAddProps {\n  status: NotificationAddStatus;\n  onClick: () => void;\n}\n\nexport const TRANSLATIONS = {\n  // Panel titles\n  GENERAL_TITLE: t('General information'),\n  ALERT_CONDITION_TITLE: t('Alert condition'),\n  ALERT_CONTENTS_TITLE: t('Alert contents'),\n  REPORT_CONTENTS_TITLE: t('Report contents'),\n  SCHEDULE_TITLE: t('Schedule'),\n  NOTIFICATION_TITLE: t('Notification method'),\n  // Error text\n  NAME_ERROR_TEXT: t('name'),\n  OWNERS_ERROR_TEXT: t('owners'),\n  CONTENT_ERROR_TEXT: t('content type'),\n  DATABASE_ERROR_TEXT: t('database'),\n  SQL_ERROR_TEXT: t('sql'),\n  ALERT_CONDITION_ERROR_TEXT: t('alert condition'),\n  CRONTAB_ERROR_TEXT: t('crontab'),\n  WORKING_TIMEOUT_ERROR_TEXT: t('working timeout'),\n  RECIPIENTS_ERROR_TEXT: t('recipients'),\n  ERROR_TOOLTIP_MESSAGE: t(\n    'Not all required fields are complete. Please provide the following:',\n  ),\n};\n\nconst NotificationMethodAdd: FunctionComponent<NotificationMethodAddProps> = ({\n  status = 'active',\n  onClick,\n}) => {\n  if (status === 'hidden') {\n    return null;\n  }\n\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n\n  return (\n    <StyledNotificationAddButton className={status} onClick={checkStatus}>\n      <i className=\"fa fa-plus\" />{' '}\n      {status === 'active'\n        ? t('Add another notification method')\n        : t('Add delivery method')}\n    </StyledNotificationAddButton>\n  );\n};\n\nconst AlertReportModal: FunctionComponent<AlertReportModalProps> = ({\n  addDangerToast,\n  onAdd,\n  onHide,\n  show,\n  alert = null,\n  isReport = false,\n  addSuccessToast,\n}) => {\n  const currentUser = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  // Check config for alternate notification methods setting\n  const conf = useCommonConf();\n  const allowedNotificationMethods: NotificationMethodOption[] =\n    conf?.ALERT_REPORTS_NOTIFICATION_METHODS || DEFAULT_NOTIFICATION_METHODS;\n\n  const [disableSave, setDisableSave] = useState<boolean>(true);\n\n  const [currentAlert, setCurrentAlert] =\n    useState<Partial<AlertObject> | null>();\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [contentType, setContentType] = useState<string>('dashboard');\n  const [reportFormat, setReportFormat] = useState<string>(\n    DEFAULT_NOTIFICATION_FORMAT,\n  );\n  const [forceScreenshot, setForceScreenshot] = useState<boolean>(false);\n\n  const [isScreenshot, setIsScreenshot] = useState<boolean>(false);\n  useEffect(() => {\n    setIsScreenshot(\n      contentType === 'dashboard' ||\n        (contentType === 'chart' && reportFormat === 'PNG'),\n    );\n  }, [contentType, reportFormat]);\n\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState<boolean>(false);\n  const [sourceOptions, setSourceOptions] = useState<MetaObject[]>([]);\n  const [dashboardOptions, setDashboardOptions] = useState<MetaObject[]>([]);\n  const [chartOptions, setChartOptions] = useState<MetaObject[]>([]);\n  // Validation\n  const [validationStatus, setValidationStatus] = useState<ValidationObject>({\n    [Sections.General]: {\n      hasErrors: false,\n      name: TRANSLATIONS.GENERAL_TITLE,\n      errors: [],\n    },\n    [Sections.Content]: {\n      hasErrors: false,\n      name: isReport\n        ? TRANSLATIONS.REPORT_CONTENTS_TITLE\n        : TRANSLATIONS.ALERT_CONTENTS_TITLE,\n      errors: [],\n    },\n    [Sections.Alert]: {\n      hasErrors: false,\n      name: TRANSLATIONS.ALERT_CONDITION_TITLE,\n      errors: [],\n    },\n    [Sections.Schedule]: {\n      hasErrors: false,\n      name: TRANSLATIONS.SCHEDULE_TITLE,\n      errors: [],\n    },\n    [Sections.Notification]: {\n      hasErrors: false,\n      name: TRANSLATIONS.NOTIFICATION_TITLE,\n      errors: [],\n    },\n  });\n  const [errorTooltipMessage, setErrorTooltipMessage] = useState<ReactNode>('');\n\n  const updateValidationStatus = (section: Sections, errors: string[]) => {\n    setValidationStatus(currentValidationData => ({\n      ...currentValidationData,\n      [section]: {\n        hasErrors: errors.length > 0,\n        name: currentValidationData[section].name,\n        errors,\n      },\n    }));\n  };\n\n  // Chart metadata\n  const [chartVizType, setChartVizType] = useState<string>('');\n\n  const reportOrAlert = isReport ? 'report' : 'alert';\n  const isEditMode = alert !== null;\n  const formatOptionEnabled =\n    contentType === 'chart' &&\n    (isFeatureEnabled(FeatureFlag.AlertsAttachReports) || isReport);\n\n  const [notificationAddState, setNotificationAddState] =\n    useState<NotificationAddStatus>('active');\n\n  const [notificationSettings, setNotificationSettings] = useState<\n    NotificationSetting[]\n  >([]);\n  const onNotificationAdd = () => {\n    setNotificationSettings([\n      ...notificationSettings,\n      {\n        recipients: '',\n        // options shown in the newly added notification method\n        options: allowedNotificationMethods.filter(\n          // are filtered such that\n          option =>\n            // options are not included\n            !notificationSettings.reduce(\n              // when it exists in previous notificationSettings\n              (accum, setting) => accum || option === setting.method,\n              false,\n            ),\n        ),\n      },\n    ]);\n\n    setNotificationAddState(\n      notificationSettings.length === allowedNotificationMethods.length\n        ? 'hidden'\n        : 'disabled',\n    );\n  };\n\n  const {\n    ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    ALERT_REPORTS_DEFAULT_RETENTION,\n  } = useSelector<any, AlertsReportsConfig>(state => {\n    const conf = state.common?.conf;\n    return {\n      ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT:\n        conf?.ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT ?? DEFAULT_WORKING_TIMEOUT,\n      ALERT_REPORTS_DEFAULT_CRON_VALUE:\n        conf?.ALERT_REPORTS_DEFAULT_CRON_VALUE ?? DEFAULT_CRON_VALUE,\n      ALERT_REPORTS_DEFAULT_RETENTION:\n        conf?.ALERT_REPORTS_DEFAULT_RETENTION ?? DEFAULT_RETENTION,\n    };\n  });\n\n  const defaultAlert = {\n    active: true,\n    creation_method: 'alerts_reports',\n    crontab: ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    log_retention: ALERT_REPORTS_DEFAULT_RETENTION,\n    working_timeout: ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    name: '',\n    owners: [],\n    recipients: [],\n    sql: '',\n    validator_config_json: {},\n    validator_type: '',\n    force_screenshot: false,\n    grace_period: undefined,\n  };\n\n  const updateNotificationSetting = (\n    index: number,\n    setting: NotificationSetting,\n  ) => {\n    const settings: NotificationSetting[] = [...notificationSettings];\n    settings[index] = setting;\n\n    // if you've changed notification method -> remove trailing methods\n    if (notificationSettings[index].method !== setting.method) {\n      notificationSettings[index] = setting;\n\n      setNotificationSettings(\n        notificationSettings.filter((_, idx) => idx <= index),\n      );\n\n      if (notificationSettings.length - 1 > index) {\n        setNotificationAddState('active');\n      }\n\n      if (setting.method !== undefined && notificationAddState !== 'hidden') {\n        setNotificationAddState('active');\n      }\n    } else {\n      setNotificationSettings(settings);\n    }\n  };\n\n  const removeNotificationSetting = (index: number) => {\n    const settings = notificationSettings.slice();\n\n    settings.splice(index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n\n  // Alert fetch logic\n  const {\n    state: { loading, resource, error: fetchError },\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  } = useSingleViewResource<AlertObject>('report', t('report'), addDangerToast);\n\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...defaultAlert });\n    setNotificationAddState('active');\n  };\n\n  const onSave = () => {\n    // Notification Settings\n    const recipients: Recipient[] = [];\n\n    notificationSettings.forEach(setting => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients,\n          },\n          type: setting.method,\n        });\n      }\n    });\n\n    const shouldEnableForceScreenshot = contentType === 'chart' && !isReport;\n    const data: any = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      force_screenshot: shouldEnableForceScreenshot || forceScreenshot,\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull\n        ? {}\n        : currentAlert?.validator_config_json,\n      chart: contentType === 'chart' ? currentAlert?.chart?.value : null,\n      dashboard:\n        contentType === 'dashboard' ? currentAlert?.dashboard?.value : null,\n      custom_width: isScreenshot ? currentAlert?.custom_width : undefined,\n      database: currentAlert?.database?.value,\n      owners: (currentAlert?.owners || []).map(\n        owner => (owner as MetaObject).value || owner.id,\n      ),\n      recipients,\n      report_format:\n        contentType === 'dashboard'\n          ? DEFAULT_NOTIFICATION_FORMAT\n          : reportFormat || DEFAULT_NOTIFICATION_FORMAT,\n    };\n\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n\n    data.context_markdown = 'string';\n\n    if (isEditMode) {\n      // Edit\n      if (currentAlert?.id) {\n        const update_id = currentAlert.id;\n\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n\n        updateResource(update_id, data).then(response => {\n          if (!response) {\n            return;\n          }\n\n          addSuccessToast(t('%s updated', data.type));\n\n          if (onAdd) {\n            onAdd();\n          }\n\n          hide();\n        });\n      }\n    } else if (currentAlert) {\n      // Create\n      createResource(data).then(response => {\n        if (!response) {\n          return;\n        }\n\n        addSuccessToast(t('%s updated', data.type));\n\n        if (onAdd) {\n          onAdd(response);\n        }\n\n        hide();\n      });\n    }\n  };\n\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/created_by?q=${query}`,\n        }).then(response => ({\n          data: response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          ),\n          totalCount: response.json.count,\n        }));\n      },\n    [],\n  );\n\n  const getSourceData = useCallback(\n    (db?: MetaObject) => {\n      const database = db || currentAlert?.database;\n\n      if (!database || database.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through source options to find the selected option\n      sourceOptions.forEach(source => {\n        if (source.value === database.value || source.value === database.id) {\n          result = source;\n        }\n      });\n\n      return result;\n    },\n    [currentAlert?.database, sourceOptions],\n  );\n\n  // Updating alert/report state\n  const updateAlertState = (name: string, value: any) => {\n    setCurrentAlert(currentAlertData => ({\n      ...currentAlertData,\n      [name]: value,\n    }));\n  };\n\n  const loadSourceOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/database?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setSourceOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const databaseLabel = currentAlert?.database && !currentAlert.database.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (databaseLabel) {\n      updateAlertState('database', getSourceData());\n    }\n  }, [databaseLabel, getSourceData]);\n\n  const loadDashboardOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/dashboard?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setDashboardOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getDashboardData = (db?: MetaObject) => {\n    const dashboard = db || currentAlert?.dashboard;\n\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n\n    let result;\n\n    // Cycle through dashboard options to find the selected option\n    dashboardOptions.forEach(dash => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n\n    return result;\n  };\n\n  const getChartData = useCallback(\n    (chartData?: MetaObject) => {\n      const chart = chartData || currentAlert?.chart;\n\n      if (!chart || chart.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through chart options to find the selected option\n      chartOptions.forEach(slice => {\n        if (slice.value === chart.value || slice.value === chart.id) {\n          result = slice;\n        }\n      });\n\n      return result;\n    },\n    [chartOptions, currentAlert?.chart],\n  );\n\n  const noChartLabel = currentAlert?.chart && !currentAlert?.chart.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (noChartLabel) {\n      updateAlertState('chart', getChartData());\n    }\n  }, [getChartData, noChartLabel]);\n\n  const loadChartOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/chart?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n\n          setChartOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getChartVisualizationType = (chart: SelectValue) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/${chart.value}`,\n    }).then(response => setChartVizType(response.json.result.viz_type));\n\n  // Handle input/textarea updates\n  const onInputChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const {\n      target: { type, value, name },\n    } = event;\n    const parsedValue = type === 'number' ? parseInt(value, 10) || null : value;\n\n    updateAlertState(name, parsedValue);\n  };\n\n  const onCustomWidthChange = (value: number | null | undefined) => {\n    updateAlertState('custom_width', value);\n  };\n\n  const onTimeoutVerifyChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { target } = event;\n    const value = +target.value;\n\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, undefined);\n    } else {\n      updateAlertState(\n        target.name,\n        value ? Math.max(value, TIMEOUT_MIN) : value,\n      );\n    }\n  };\n\n  const onSQLChange = (value: string) => {\n    updateAlertState('sql', value || '');\n  };\n\n  const onOwnersChange = (value: Array<SelectValue>) => {\n    updateAlertState('owners', value || []);\n  };\n\n  const onSourceChange = (value: Array<SelectValue>) => {\n    updateAlertState('database', value || []);\n  };\n\n  const onDashboardChange = (dashboard: SelectValue) => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n  };\n\n  const onChartChange = (chart: SelectValue) => {\n    getChartVisualizationType(chart);\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n\n  const onActiveSwitch = (checked: boolean) => {\n    updateAlertState('active', checked);\n  };\n\n  const onConditionChange = (op: Operator) => {\n    setConditionNotNull(op === 'not null');\n\n    const config = {\n      op,\n      threshold: currentAlert\n        ? currentAlert.validator_config_json?.threshold\n        : undefined,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onThresholdChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    const config = {\n      op: currentAlert ? currentAlert.validator_config_json?.op : undefined,\n      threshold: target.value,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onLogRetentionChange = (retention: number) => {\n    updateAlertState('log_retention', retention);\n  };\n\n  const onTimezoneChange = (timezone: string) => {\n    updateAlertState('timezone', timezone);\n  };\n\n  const onContentTypeChange = (value: string) => {\n    // When switch content type, reset force_screenshot to false\n    setForceScreenshot(false);\n    setContentType(value);\n  };\n\n  const onFormatChange = (value: string) => {\n    setReportFormat(value);\n  };\n\n  const onForceScreenshotChange = (event: any) => {\n    setForceScreenshot(event.target.checked);\n  };\n\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n\n    let hasInfo = false;\n\n    notificationSettings.forEach(setting => {\n      if (!!setting.method && setting.recipients?.length) {\n        hasInfo = true;\n      }\n    });\n\n    return hasInfo;\n  };\n\n  const validateGeneralSection = () => {\n    const errors = [];\n    if (!currentAlert?.name?.length) {\n      errors.push(TRANSLATIONS.NAME_ERROR_TEXT);\n    }\n    if (!currentAlert?.owners?.length) {\n      errors.push(TRANSLATIONS.OWNERS_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.General, errors);\n  };\n  const validateContentSection = () => {\n    const errors = [];\n    if (\n      !(\n        (contentType === 'dashboard' && !!currentAlert?.dashboard) ||\n        (contentType === 'chart' && !!currentAlert?.chart)\n      )\n    ) {\n      errors.push(TRANSLATIONS.CONTENT_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Content, errors);\n  };\n  const validateAlertSection = () => {\n    const errors = [];\n    if (!currentAlert?.database) {\n      errors.push(TRANSLATIONS.DATABASE_ERROR_TEXT);\n    }\n    if (!currentAlert?.sql?.length) {\n      errors.push(TRANSLATIONS.SQL_ERROR_TEXT);\n    }\n    if (\n      !(\n        (conditionNotNull || !!currentAlert?.validator_config_json?.op) &&\n        (conditionNotNull ||\n          currentAlert?.validator_config_json?.threshold !== undefined)\n      )\n    ) {\n      errors.push(TRANSLATIONS.ALERT_CONDITION_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Alert, errors);\n  };\n\n  const validateScheduleSection = () => {\n    const errors = [];\n    if (!currentAlert?.crontab?.length) {\n      errors.push(TRANSLATIONS.CRONTAB_ERROR_TEXT);\n    }\n    if (!currentAlert?.working_timeout) {\n      errors.push(TRANSLATIONS.WORKING_TIMEOUT_ERROR_TEXT);\n    }\n\n    updateValidationStatus(Sections.Schedule, errors);\n  };\n\n  const validateNotificationSection = () => {\n    const hasErrors = !checkNotificationSettings();\n    const errors = hasErrors ? [TRANSLATIONS.RECIPIENTS_ERROR_TEXT] : [];\n    updateValidationStatus(Sections.Notification, errors);\n  };\n\n  const validateAll = () => {\n    validateGeneralSection();\n    validateContentSection();\n    if (!isReport) validateAlertSection();\n    validateScheduleSection();\n    validateNotificationSection();\n  };\n\n  const enforceValidation = () => {\n    const sections = [\n      Sections.General,\n      Sections.Content,\n      isReport ? undefined : Sections.Alert,\n      Sections.Schedule,\n      Sections.Notification,\n    ];\n\n    const hasErrors = sections.some(\n      section => section && validationStatus[section].hasErrors,\n    );\n    const tooltip = hasErrors ? buildErrorTooltipMessage(validationStatus) : '';\n    setErrorTooltipMessage(tooltip);\n    setDisableSave(hasErrors);\n  };\n\n  // Initialize\n  useEffect(() => {\n    if (\n      isEditMode &&\n      (!currentAlert?.id || alert?.id !== currentAlert.id || (isHidden && show))\n    ) {\n      if (alert?.id !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else if (\n      !isEditMode &&\n      (!currentAlert || currentAlert.id || (isHidden && show))\n    ) {\n      setCurrentAlert({\n        ...defaultAlert,\n        owners: currentUser\n          ? [\n              {\n                value: currentUser.userId,\n                label: `${currentUser.firstName} ${currentUser.lastName}`,\n              },\n            ]\n          : [],\n      });\n      setNotificationSettings([\n        {\n          recipients: '',\n          options: allowedNotificationMethods,\n          method: 'Email',\n        },\n      ]);\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n\n  useEffect(() => {\n    if (resource) {\n      // Add notification settings\n      const settings = (resource.recipients || []).map(setting => {\n        const config =\n          typeof setting.recipient_config_json === 'string'\n            ? JSON.parse(setting.recipient_config_json)\n            : {};\n        return {\n          method: setting.type,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: allowedNotificationMethods,\n        };\n      });\n\n      setNotificationSettings(settings);\n      setNotificationAddState(\n        settings.length === allowedNotificationMethods.length\n          ? 'hidden'\n          : 'active',\n      );\n      setContentType(resource.chart ? 'chart' : 'dashboard');\n      setReportFormat(\n        resource.chart\n          ? resource.report_format || DEFAULT_NOTIFICATION_FORMAT\n          : DEFAULT_NOTIFICATION_FORMAT,\n      );\n      const validatorConfig =\n        typeof resource.validator_config_json === 'string'\n          ? JSON.parse(resource.validator_config_json)\n          : resource.validator_config_json;\n\n      setConditionNotNull(resource.validator_type === 'not null');\n\n      if (resource.chart) {\n        setChartVizType((resource.chart as ChartObject).viz_type);\n      }\n      setForceScreenshot(resource.force_screenshot);\n\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart\n          ? getChartData(resource.chart) || {\n              value: (resource.chart as ChartObject).id,\n              label: (resource.chart as ChartObject).slice_name,\n            }\n          : undefined,\n        dashboard: resource.dashboard\n          ? getDashboardData(resource.dashboard) || {\n              value: (resource.dashboard as DashboardObject).id,\n              label: (resource.dashboard as DashboardObject).dashboard_title,\n            }\n          : undefined,\n        database: resource.database\n          ? getSourceData(resource.database) || {\n              value: (resource.database as DatabaseObject).id,\n              label: (resource.database as DatabaseObject).database_name,\n            }\n          : undefined,\n        owners: (alert?.owners || []).map(owner => ({\n          value: (owner as MetaObject).value || owner.id,\n          label:\n            (owner as MetaObject).label ||\n            `${(owner as Owner).first_name} ${(owner as Owner).last_name}`,\n        })),\n        // @ts-ignore: Type not assignable\n        validator_config_json:\n          resource.validator_type === 'not null'\n            ? {\n                op: 'not null',\n              }\n            : validatorConfig,\n      });\n    }\n  }, [resource]);\n\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validateAll();\n  }, [\n    currentAlertSafe.name,\n    currentAlertSafe.owners,\n    currentAlertSafe.database,\n    currentAlertSafe.sql,\n    currentAlertSafe.validator_config_json,\n    currentAlertSafe.crontab,\n    currentAlertSafe.working_timeout,\n    currentAlertSafe.dashboard,\n    currentAlertSafe.chart,\n    contentType,\n    notificationSettings,\n    conditionNotNull,\n  ]);\n  useEffect(() => {\n    enforceValidation();\n  }, [validationStatus]);\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  const getTitleText = () => {\n    let titleText;\n\n    switch (true) {\n      case isEditMode && isReport:\n        titleText = t('Edit Report');\n        break;\n      case isEditMode:\n        titleText = t('Edit Alert');\n        break;\n      case isReport:\n        titleText = t('Add Report');\n        break;\n      default:\n        titleText = t('Add Alert');\n        break;\n    }\n\n    return titleText;\n  };\n\n  return (\n    <StyledModal\n      className=\"no-content-padding\"\n      responsive\n      disablePrimaryButton={disableSave}\n      primaryTooltipMessage={errorTooltipMessage}\n      onHandledPrimaryAction={onSave}\n      onHide={hide}\n      primaryButtonName={isEditMode ? t('Save') : t('Add')}\n      show={show}\n      width=\"500px\"\n      centered\n      title={<h4 data-test=\"alert-report-modal-title\">{getTitleText()}</h4>}\n    >\n      <Collapse\n        expandIconPosition=\"right\"\n        defaultActiveKey=\"general\"\n        accordion\n        css={css`\n          border: 'none';\n        `}\n      >\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.GENERAL_TITLE}\n              subtitle={t(\n                'Set up basic details, such as name and description.',\n              )}\n              validateCheckStatus={\n                !validationStatus[Sections.General].hasErrors\n              }\n              testId=\"general-information-panel\"\n            />\n          }\n          key=\"general\"\n        >\n          <div className=\"header-section\">\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {isReport ? t('Report name') : t('Alert name')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  value={currentAlert ? currentAlert.name : ''}\n                  placeholder={\n                    isReport ? t('Enter report name') : t('Enter alert name')\n                  }\n                  onChange={onInputChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Owners')}\n                <span className=\"required\">*</span>\n              </div>\n              <div data-test=\"owners-select\" className=\"input-container\">\n                <AsyncSelect\n                  ariaLabel={t('Owners')}\n                  allowClear\n                  name=\"owners\"\n                  mode=\"multiple\"\n                  placeholder={t('Select owners')}\n                  value={\n                    (currentAlert?.owners as {\n                      label: string;\n                      value: number;\n                    }[]) || []\n                  }\n                  options={loadOwnerOptions}\n                  onChange={onOwnersChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">{t('Description')}</div>\n              <div className=\"input-container\">\n                <input\n                  type=\"text\"\n                  name=\"description\"\n                  value={currentAlert ? currentAlert.description || '' : ''}\n                  placeholder={t(\n                    'Include description to be sent with %s',\n                    reportOrAlert,\n                  )}\n                  onChange={onInputChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledSwitchContainer>\n              <Switch\n                checked={currentAlert ? currentAlert.active : false}\n                defaultChecked\n                onChange={onActiveSwitch}\n              />\n              <div className=\"switch-label\">\n                {isReport ? t('Report is active') : t('Alert is active')}\n              </div>\n            </StyledSwitchContainer>\n          </div>\n        </StyledPanel>\n        {!isReport && (\n          <StyledPanel\n            header={\n              <ValidatedPanelHeader\n                title={TRANSLATIONS.ALERT_CONDITION_TITLE}\n                subtitle={t(\n                  'Define the database, SQL query, and triggering conditions for alert.',\n                )}\n                validateCheckStatus={\n                  !validationStatus[Sections.Alert].hasErrors\n                }\n                testId=\"alert-condition-panel\"\n              />\n            }\n            key=\"condition\"\n          >\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Database')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <AsyncSelect\n                  ariaLabel={t('Database')}\n                  name=\"source\"\n                  placeholder={t('Select database')}\n                  value={\n                    currentAlert?.database?.label &&\n                    currentAlert?.database?.value\n                      ? {\n                          value: currentAlert.database.value,\n                          label: currentAlert.database.label,\n                        }\n                      : undefined\n                  }\n                  options={loadSourceOptions}\n                  onChange={onSourceChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('SQL Query')}\n                <StyledTooltip\n                  tooltip={t(\n                    'The result of this query must be a value capable of numeric interpretation e.g. 1, 1.0, or \"1\" (compatible with Python\\'s float() function).',\n                  )}\n                />\n                <span className=\"required\">*</span>\n              </div>\n              <TextAreaControl\n                name=\"sql\"\n                language=\"sql\"\n                offerEditInModal={false}\n                minLines={15}\n                maxLines={15}\n                onChange={onSQLChange}\n                readOnly={false}\n                initialValue={resource?.sql}\n                key={currentAlert?.id}\n              />\n            </StyledInputContainer>\n            <div className=\"inline-container wrap\">\n              <StyledInputContainer css={noMarginBottom}>\n                <div className=\"control-label\" css={inputSpacer}>\n                  {t('Trigger Alert If...')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <Select\n                    ariaLabel={t('Condition')}\n                    onChange={onConditionChange}\n                    placeholder={t('Condition')}\n                    value={currentAlert?.validator_config_json?.op || undefined}\n                    options={CONDITIONS}\n                    css={inputSpacer}\n                  />\n                </div>\n              </StyledInputContainer>\n              <StyledInputContainer css={noMarginBottom}>\n                <div className=\"control-label\">\n                  {t('Value')}{' '}\n                  {!conditionNotNull && <span className=\"required\">*</span>}\n                </div>\n                <div className=\"input-container\">\n                  <input\n                    type=\"number\"\n                    name=\"threshold\"\n                    disabled={conditionNotNull}\n                    value={\n                      currentAlert?.validator_config_json?.threshold !==\n                        undefined && !conditionNotNull\n                        ? currentAlert.validator_config_json.threshold\n                        : ''\n                    }\n                    placeholder={t('Value')}\n                    onChange={onThresholdChange}\n                  />\n                </div>\n              </StyledInputContainer>\n            </div>\n          </StyledPanel>\n        )}\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={\n                isReport\n                  ? TRANSLATIONS.REPORT_CONTENTS_TITLE\n                  : TRANSLATIONS.ALERT_CONTENTS_TITLE\n              }\n              subtitle={t('Customize data source, filters, and layout.')}\n              validateCheckStatus={\n                !validationStatus[Sections.Content].hasErrors\n              }\n              testId=\"contents-panel\"\n            />\n          }\n          key=\"contents\"\n        >\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Content type')}\n              <span className=\"required\">*</span>\n            </div>\n            <Select\n              ariaLabel={t('Select content type')}\n              onChange={onContentTypeChange}\n              value={contentType}\n              options={CONTENT_TYPE_OPTIONS}\n              placeholder={t('Select content type')}\n            />\n          </StyledInputContainer>\n          <StyledInputContainer>\n            {contentType === 'chart' ? (\n              <>\n                <div className=\"control-label\">\n                  {t('Select chart')}\n                  <span className=\"required\">*</span>\n                </div>\n                <AsyncSelect\n                  ariaLabel={t('Chart')}\n                  name=\"chart\"\n                  value={\n                    currentAlert?.chart?.label && currentAlert?.chart?.value\n                      ? {\n                          value: currentAlert.chart.value,\n                          label: currentAlert.chart.label,\n                        }\n                      : undefined\n                  }\n                  options={loadChartOptions}\n                  onChange={onChartChange}\n                  placeholder={t('Select chart to use')}\n                />\n              </>\n            ) : (\n              <>\n                <div className=\"control-label\">\n                  {t('Select dashboard')}\n                  <span className=\"required\">*</span>\n                </div>\n                <AsyncSelect\n                  ariaLabel={t('Dashboard')}\n                  name=\"dashboard\"\n                  value={\n                    currentAlert?.dashboard?.label &&\n                    currentAlert?.dashboard?.value\n                      ? {\n                          value: currentAlert.dashboard.value,\n                          label: currentAlert.dashboard.label,\n                        }\n                      : undefined\n                  }\n                  options={loadDashboardOptions}\n                  onChange={onDashboardChange}\n                  placeholder={t('Select dashboard to use')}\n                />\n              </>\n            )}\n          </StyledInputContainer>\n          <StyledInputContainer\n            css={['TEXT', 'CSV'].includes(reportFormat) && noMarginBottom}\n          >\n            {formatOptionEnabled && (\n              <>\n                <div className=\"control-label\">\n                  {t('Content format')}\n                  <span className=\"required\">*</span>\n                </div>\n                <Select\n                  ariaLabel={t('Select format')}\n                  onChange={onFormatChange}\n                  value={reportFormat}\n                  options={\n                    /* If chart is of text based viz type: show text\n                  format option */\n                    TEXT_BASED_VISUALIZATION_TYPES.includes(chartVizType)\n                      ? Object.values(FORMAT_OPTIONS)\n                      : ['png', 'csv'].map(key => FORMAT_OPTIONS[key])\n                  }\n                  placeholder={t('Select format')}\n                />\n              </>\n            )}\n          </StyledInputContainer>\n          {isScreenshot && (\n            <StyledInputContainer\n              css={!isReport && contentType === 'chart' && noMarginBottom}\n            >\n              <div className=\"control-label\">{t('Screenshot width')}</div>\n              <div className=\"input-container\">\n                <InputNumber\n                  type=\"number\"\n                  name=\"custom_width\"\n                  value={currentAlert?.custom_width || undefined}\n                  min={600}\n                  max={2400}\n                  placeholder={t('Input custom width in pixels')}\n                  onChange={onCustomWidthChange}\n                />\n              </div>\n            </StyledInputContainer>\n          )}\n          {(isReport || contentType === 'dashboard') && (\n            <div className=\"inline-container\">\n              <StyledCheckbox\n                data-test=\"bypass-cache\"\n                className=\"checkbox\"\n                checked={forceScreenshot}\n                onChange={onForceScreenshotChange}\n              >\n                {t('Ignore cache when generating report')}\n              </StyledCheckbox>\n            </div>\n          )}\n        </StyledPanel>\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.SCHEDULE_TITLE}\n              subtitle={t(\n                'Define delivery schedule, timezone, and frequency settings.',\n              )}\n              validateCheckStatus={\n                !validationStatus[Sections.Schedule].hasErrors\n              }\n              testId=\"schedule-panel\"\n            />\n          }\n          key=\"schedule\"\n        >\n          <AlertReportCronScheduler\n            value={currentAlert?.crontab || ''}\n            onChange={newVal => updateAlertState('crontab', newVal)}\n          />\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Timezone')} <span className=\"required\">*</span>\n            </div>\n            <TimezoneSelector\n              onTimezoneChange={onTimezoneChange}\n              timezone={currentAlert?.timezone}\n              minWidth=\"100%\"\n            />\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Log retention')}\n              <span className=\"required\">*</span>\n            </div>\n            <div className=\"input-container\">\n              <Select\n                ariaLabel={t('Log retention')}\n                placeholder={t('Log retention')}\n                onChange={onLogRetentionChange}\n                value={currentAlert?.log_retention}\n                options={RETENTION_OPTIONS}\n                sortComparator={propertyComparator('value')}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer css={noMarginBottom}>\n            {isReport ? (\n              <>\n                <div className=\"control-label\">\n                  {t('Working timeout')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <NumberInput\n                    min={1}\n                    name=\"working_timeout\"\n                    value={currentAlert?.working_timeout || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                    timeUnit={t('seconds')}\n                  />\n                </div>\n              </>\n            ) : (\n              <>\n                <div className=\"control-label\">{t('Grace period')}</div>\n                <div className=\"input-container\">\n                  <NumberInput\n                    min={1}\n                    name=\"grace_period\"\n                    value={currentAlert?.grace_period || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                    timeUnit={t('seconds')}\n                  />\n                </div>\n              </>\n            )}\n          </StyledInputContainer>\n        </StyledPanel>\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.NOTIFICATION_TITLE}\n              subtitle={t('Choose notification method and recipients.')}\n              validateCheckStatus={\n                !validationStatus[Sections.Notification].hasErrors\n              }\n              testId=\"notification-method-panel\"\n            />\n          }\n          key=\"notification\"\n        >\n          {notificationSettings.map((notificationSetting, i) => (\n            <StyledNotificationMethodWrapper>\n              <NotificationMethod\n                setting={notificationSetting}\n                index={i}\n                key={`NotificationMethod-${i}`}\n                onUpdate={updateNotificationSetting}\n                onRemove={removeNotificationSetting}\n              />\n            </StyledNotificationMethodWrapper>\n          ))}\n          {\n            // Prohibit 'add notification method' button if only one present\n            allowedNotificationMethods.length > notificationSettings.length && (\n              <NotificationMethodAdd\n                data-test=\"notification-add\"\n                status={notificationAddState}\n                onClick={onNotificationAdd}\n              />\n            )\n          }\n        </StyledPanel>\n      </Collapse>\n    </StyledModal>\n  );\n};\n\nexport default withToasts(AlertReportModal);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Owner from 'src/types/Owner';\nimport { NotificationFormats } from 'src/features/reports/types';\n\ntype user = {\n  id: number;\n  first_name: string;\n  last_name: string;\n};\nexport type ChartObject = {\n  id: number;\n  slice_name: string;\n  viz_type: string;\n};\n\nexport type DashboardObject = {\n  dashboard_title: string;\n  id: number;\n};\n\nexport type DatabaseObject = {\n  database_name: string;\n  id: number;\n};\n\nexport type NotificationMethodOption = 'Email' | 'Slack';\n\nexport type NotificationSetting = {\n  method?: NotificationMethodOption;\n  recipients: string;\n  options: NotificationMethodOption[];\n};\n\nexport type Recipient = {\n  recipient_config_json: {\n    target: string;\n  };\n  type: NotificationMethodOption;\n};\n\nexport type MetaObject = {\n  id?: number;\n  label?: string;\n  value?: number | string;\n};\n\nexport type Operator = '<' | '>' | '<=' | '>=' | '==' | '!=' | 'not null';\n\nexport type AlertObject = {\n  active?: boolean;\n  creation_method?: string;\n  chart?: MetaObject;\n  changed_by?: user;\n  changed_on_delta_humanized?: string;\n  chart_id: number;\n  created_by?: user;\n  created_on?: string;\n  crontab?: string;\n  custom_width?: number | null;\n  dashboard?: MetaObject;\n  dashboard_id?: number;\n  database?: MetaObject;\n  description?: string;\n  error?: string;\n  force_screenshot: boolean;\n  grace_period?: number;\n  id: number;\n  last_eval_dttm?: number;\n  last_state?: 'Success' | 'Working' | 'Error' | 'Not triggered' | 'On Grace';\n  log_retention?: number;\n  name?: string;\n  owners?: Array<Owner | MetaObject>;\n  sql?: string;\n  timezone?: string;\n  recipients?: Array<Recipient>;\n  report_format?: NotificationFormats;\n  type?: string;\n  validator_config_json?: {\n    op?: Operator;\n    threshold?: number;\n  };\n  validator_type?: string;\n  working_timeout?: number;\n};\n\nexport type LogObject = {\n  end_dttm: string;\n  error_message: string;\n  id: number;\n  scheduled_dttm: string;\n  start_dttm: string;\n  state: string;\n  value: string;\n  uuid: string;\n};\n\nexport enum AlertState {\n  Success = 'Success',\n  Working = 'Working',\n  Error = 'Error',\n  Noop = 'Not triggered',\n  Grace = 'On Grace',\n}\n\nexport enum RecipientIconName {\n  Email = 'Email',\n  Slack = 'Slack',\n}\nexport interface AlertsReportsConfig {\n  ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT: number;\n  ALERT_REPORTS_DEFAULT_RETENTION: number;\n  ALERT_REPORTS_DEFAULT_CRON_VALUE: string;\n}\n\nexport type SectionValidationObject = {\n  hasErrors: boolean;\n  errors: string[];\n  name: string;\n};\n\nexport interface ValidationObject {\n  [key: string]: SectionValidationObject;\n}\n\nexport enum Sections {\n  General = 'generalSection',\n  Content = 'contentSection',\n  Alert = 'alertConditionSection',\n  Schedule = 'scheduleSection',\n  Notification = 'notificationSection',\n}\n"],"names":["propTypes","name","PropTypes","onChange","initialValue","height","minLines","maxLines","offerEditInModal","language","aboveEditorSection","readOnly","resize","textAreaStyles","TextAreaControl","React","onControlChange","event","value","target","this","props","onAreaEditorChange","renderEditor","inModal","style","border","theme","colors","grayscale","light1","minHeight","width","backgroundColor","___EmotionJSX","TextAreaEditor","_extends","mode","editorProps","$blockScrolling","defaultValue","key","bind","TextArea","placeholder","t","disabled","renderModalBody","render","controlHeader","ControlHeader","ModalTrigger","modalTitle","triggerNode","Button","buttonSize","className","modalBody","responsive","defaultProps","withTheme","LOCALE","everyText","emptyMonths","emptyMonthDays","emptyMonthDaysShort","emptyWeekDays","emptyWeekDaysShort","emptyHours","emptyMinutes","emptyMinutesForHourPeriod","yearOption","monthOption","weekOption","dayOption","hourOption","minuteOption","rebootOption","prefixPeriod","prefixMonths","prefixMonthDays","prefixWeekDays","prefixWeekDaysForMonthAndYearPeriod","prefixHours","prefixMinutes","prefixMinutesForHourPeriod","suffixMinutesForHourPeriod","errorInvalidCron","clearButtonText","weekDays","months","altWeekDays","altMonths","CronPicker","styled","ConfigProvider","getPopupContainer","trigger","parentElement","ReactCronPicker","locale","gridUnit","StyledSwitch","BaseSwitch","primary","base","Switch","DEFAULT_TIMEZONE","MIN_SELECT_WIDTH","offsetsToName","currentDate","moment","JANUARY","JULY","getOffsetKey","tz","utcOffset","toString","getTimezoneName","_offsetsToName$offset","_offsetsToName$offset2","offsets","isDST","ALL_ZONES","countries","map","country","zonesForCountry","flat","TIMEZONES","forEach","zone","find","option","push","TIMEZONE_OPTIONS","label","format","timezoneName","TIMEZONE_OPTIONS_SORT_COMPARATOR","a","b","sort","matchTimezoneToOptions","timezone","_TIMEZONE_OPTIONS$fin","TimezoneSelector","onTimezoneChange","minWidth","validTimezone","useMemo","guess","useEffect","Select","ariaLabel","css","_css","options","sortComparator","NumberInput","timeUnit","min","isFocused","setIsFocused","useState","type","onFocus","onBlur","ScheduleType","SCHEDULE_TYPE_OPTIONS","Picker","Input","AlertReportCronScheduler","useTheme","inputRef","useRef","scheduleFormat","setScheduleFormat","customSetValue","useCallback","newValue","_inputRef$current","current","setValue","handleBlur","handlePressEnter","_inputRef$current2","input","error","onError","StyledInputContainer","e","ref","borderColor","onPressEnter","clearButton","displayError","StyledNotificationMethod","div","NotificationMethod","setting","index","onUpdate","onRemove","method","recipients","recipientValue","setRecipientValue","updatedSetting","role","tabIndex","onClick","Icons","Trash","iconColor","undefined","ValidatedPanelHeader","title","subtitle","validateCheckStatus","testId","checkmark","CheckCircleOutlined","AntdCollapse","Panel","antdPanelStyles","anticonHeight","typography","weights","bold","sizes","s","normal","warning","dark1","success","StyledList","ul","TEXT_BASED_VISUALIZATION_TYPES","DEFAULT_NOTIFICATION_METHODS","DEFAULT_NOTIFICATION_FORMAT","CONDITIONS","RETENTION_OPTIONS","CONTENT_TYPE_OPTIONS","FORMAT_OPTIONS","png","csv","txt","noMarginBottom","StyledModal","Modal","StyledSwitchContainer","light2","StyledCheckbox","AntdCheckbox","StyledTooltip","InfoTooltipWithTrigger","StyledNotificationAddButton","StyledNotificationMethodWrapper","inputSpacer","TRANSLATIONS","GENERAL_TITLE","ALERT_CONDITION_TITLE","ALERT_CONTENTS_TITLE","REPORT_CONTENTS_TITLE","SCHEDULE_TITLE","NOTIFICATION_TITLE","NAME_ERROR_TEXT","OWNERS_ERROR_TEXT","CONTENT_ERROR_TEXT","DATABASE_ERROR_TEXT","SQL_ERROR_TEXT","ALERT_CONDITION_ERROR_TEXT","CRONTAB_ERROR_TEXT","WORKING_TIMEOUT_ERROR_TEXT","RECIPIENTS_ERROR_TEXT","ERROR_TOOLTIP_MESSAGE","NotificationMethodAdd","status","checkStatus","withToasts","AlertReportModal","addDangerToast","onAdd","onHide","show","alert","isReport","addSuccessToast","_currentAlert$databas2","_currentAlert$databas3","_currentAlert$validat5","_currentAlert$validat6","_currentAlert$chart2","_currentAlert$chart3","_currentAlert$dashboa2","_currentAlert$dashboa3","currentUser","useSelector","state","user","conf","useCommonConf","allowedNotificationMethods","ALERT_REPORTS_NOTIFICATION_METHODS","disableSave","setDisableSave","currentAlert","setCurrentAlert","isHidden","setIsHidden","contentType","setContentType","reportFormat","setReportFormat","forceScreenshot","setForceScreenshot","isScreenshot","setIsScreenshot","conditionNotNull","setConditionNotNull","sourceOptions","setSourceOptions","dashboardOptions","setDashboardOptions","chartOptions","setChartOptions","validationStatus","setValidationStatus","Sections","General","hasErrors","errors","Content","Alert","Schedule","Notification","errorTooltipMessage","setErrorTooltipMessage","updateValidationStatus","section","currentValidationData","length","chartVizType","setChartVizType","reportOrAlert","isEditMode","formatOptionEnabled","isFeatureEnabled","FeatureFlag","AlertsAttachReports","notificationAddState","setNotificationAddState","notificationSettings","setNotificationSettings","ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT","ALERT_REPORTS_DEFAULT_CRON_VALUE","ALERT_REPORTS_DEFAULT_RETENTION","_state$common","_conf$ALERT_REPORTS_D","_conf$ALERT_REPORTS_D2","_conf$ALERT_REPORTS_D3","common","defaultAlert","active","creation_method","crontab","log_retention","working_timeout","owners","sql","validator_config_json","validator_type","force_screenshot","grace_period","updateNotificationSetting","settings","filter","_","idx","removeNotificationSetting","slice","splice","loading","resource","fetchError","fetchResource","createResource","updateResource","clearError","useSingleViewResource","hide","loadOwnerOptions","page","pageSize","query","rison","page_size","SupersetClient","get","endpoint","then","response","data","json","result","item","text","totalCount","count","getSourceData","db","database","source","id","updateAlertState","currentAlertData","loadSourceOptions","list","databaseLabel","loadDashboardOptions","getDashboardData","dashboard","dash","getChartData","chartData","chart","noChartLabel","loadChartOptions","onInputChange","parsedValue","parseInt","onTimeoutVerifyChange","Math","max","validateAll","validateGeneralSection","_currentAlert$name","_currentAlert$owners","validateContentSection","validateAlertSection","_currentAlert$sql","_currentAlert$validat3","_currentAlert$validat4","op","threshold","validateScheduleSection","_currentAlert$crontab","validateNotificationSection","checkNotificationSettings","hasInfo","_setting$recipients","userId","firstName","lastName","config","recipient_config_json","JSON","parse","report_format","validatorConfig","viz_type","slice_name","dashboard_title","database_name","owner","first_name","last_name","currentAlertSafe","enforceValidation","some","tooltip","buildErrorTooltipMessage","sectionErrors","Object","values","sectionTitle","join","err","disablePrimaryButton","primaryTooltipMessage","onHandledPrimaryAction","onSave","_currentAlert$chart","_currentAlert$dashboa","_currentAlert$databas","shouldEnableForceScreenshot","custom_width","context_markdown","update_id","created_by","last_eval_dttm","last_state","last_value","last_value_row_json","primaryButtonName","centered","getTitleText","titleText","Collapse","expandIconPosition","defaultActiveKey","accordion","StyledPanel","header","AsyncSelect","allowClear","description","checked","defaultChecked","_currentAlert$validat","_currentAlert$validat2","getChartVisualizationType","includes","InputNumber","newVal","retention","propertyComparator","notificationSetting","i","onNotificationAdd","reduce","accum","AlertState","RecipientIconName"],"sourceRoot":""}